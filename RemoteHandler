local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local RemoteEventList = {}
local RemoteFunctionList = {}

-- Error handling and logging
local function logError(message, isCritical)
    local logMessage = "[RemoteHandler] Error: " .. message .. (RunService:IsClient() and " (Client)" or " (Server)")

    if isCritical then
        -- Use error to throw a critical error and halt execution
        error(logMessage.."\n"..debug.traceback(), 2)
    else
        -- Use warn to log a non-critical error
        warn(logMessage)
    end
end

local RemoteHandler = {}

-- Use a single folder for both events and functions to reduce Instance count
local remoteFolder = ReplicatedStorage:WaitForChild("Remotes")

-- Caches for faster lookups
local eventCache = {}
local functionCache = {}
local validatorCache = {}

-- Create remote functions and events from server
if RunService:IsServer() then
    --create remote events
    for _, event in pairs(RemoteEventList) do
        local remote = Instance.new("RemoteEvent")
        remote.Name = event
        remote.Parent = remoteFolder
    end
    --create remote functions
    for _, event in pairs(RemoteFunctionList) do
        local remote = Instance.new("RemoteEvent")
        remote.Name = event
        remote.Parent = remoteFolder
    end
end

-- Sanity check system with optimized caching
local SanityChecks = {
    validators = {
        isNumber = function(value)
            return type(value) == "number" and not (value ~= value)  -- Check for NaN
        end,
        isInteger = function(value)
            return type(value) == "number" and not (value ~= value) and value % 1 == 0
        end,
        isString = function(value)
            return type(value) == "string"
        end,
        isBoolean = function(value)
            return type(value) == "boolean"
        end,
        isTable = function(value)
            return type(value) == "table"
        end,
        isFunction = function(value)
            return type(value) == "function"
        end,
        isUserdata = function(value)
            return type(value) == "userdata"
        end,
        isThread = function(value)
            return type(value) == "thread"
        end,
        isInRange = function(value, min, max)
            return type(value) == "number" and not (value ~= value) and value >= min and value <= max
        end,
        isPositive = function(value)
            return type(value) == "number" and not (value ~= value) and value > 0
        end,
        isNegative = function(value)
            return type(value) == "number" and not (value ~= value) and value < 0
        end,
        isNonNegative = function(value)
            return type(value) == "number" and not (value ~= value) and value >= 0
        end,
        isNonPositive = function(value)
            return type(value) == "number" and not (value ~= value) and value <= 0
        end,
        isInstanceOf = function(value, className)
            return typeof(value) == "Instance" and value:IsA(className)
        end,
        isVector3 = function(value)
            return typeof(value) == "Vector3"
        end,
        isColor3 = function(value)
            return typeof(value) == "Color3"
        end,
        isCFrame = function(value)
            return typeof(value) == "CFrame"
        end,
        isEnum = function(value)
            return typeof(value) == "EnumItem"
        end,
        isEnumOf = function(value, enumType)
            return typeof(value) == "EnumItem" and value.EnumType == enumType
        end,
        matchesPattern = function(value, pattern)
            return type(value) == "string" and string.match(value, pattern) ~= nil
        end
    }
}

function SanityChecks.validate(checkName, ...)
    local cache = validatorCache[checkName]
    if not cache then
        cache = setmetatable({}, {__mode = "k"})
        validatorCache[checkName] = cache
    end

    local args = {...}
    local cacheKey = table.concat(args, "|")
    if cache[cacheKey] ~= nil then
        return cache[cacheKey]
    end

    local result = false
    if SanityChecks.validators[checkName] then
        result = SanityChecks.validators[checkName](...)
    else
        logError("Validator '" .. checkName .. "' not found")
    end

    cache[cacheKey] = result
    return result
end

-- RemoteEvent functions
function RemoteHandler.getOrCreateEvent(eventName)
    if eventCache[eventName] then
        return eventCache[eventName]
    end

    local event = remoteFolder:FindFirstChild(eventName)
    if not event then
        if RunService:IsServer() then
            event = Instance.new("RemoteEvent")
            event.Name = eventName
            event.Parent = remoteFolder
        else
            return
        end      
    end
    
    eventCache[eventName] = event
    return event
end

-- SERVER - CLIENT
function RemoteHandler.fireClient(player, eventName, ...)
    local event = RemoteHandler.getOrCreateEvent(eventName)
    if event then
        event:FireClient(player, ...)
    else
        logError(eventName.."has not been found")
    end
end

function RemoteHandler.fireAllClients(eventName, ...)
    local event = RemoteHandler.getOrCreateEvent(eventName)
    if event then
        event:FireAllClients(...)
    else
        logError(eventName.."has not been found")
    end
    
end

function RemoteHandler.onClientEvent(eventName, callback)
    local event = RemoteHandler.getOrCreateEvent(eventName)
    if event then
        event.OnClientEvent:Connect(callback)
    else
        logError(eventName.."has not been found")
    end  
end

-- CLIENT - SERVER

function RemoteHandler.fireServer(eventName, ...)
    local event = RemoteHandler.getOrCreateEvent(eventName)
    if event then
        event:FireServer(...)
    else
        logError(eventName.."has not been found")
    end   
end

function RemoteHandler.onServerEvent(eventName, callback, checks)
    local event = RemoteHandler.getOrCreateEvent(eventName)
    if event then
        event.OnServerEvent:Connect(function(player, ...)
            if checks then
                local args = {...}
                for i, check in ipairs(checks) do
                    if not SanityChecks.validate(check.type, args[i], table.unpack(check.params or {})) then
                        logError("Sanity check failed for event '" .. eventName .. "', argument " .. i)
                        return
                    end
                end
            end
            callback(player, ...)
        end)
    else
        logError(eventName.."has not been found")
    end 
end

-- RemoteFunction functions
function RemoteHandler.getOrCreateFunction(functionName)
    if functionCache[functionName] then
        return functionCache[functionName]
    end

    local func = remoteFolder:FindFirstChild(functionName)
    if not func then
        if RunService:IsServer() then
            func = Instance.new("RemoteFunction")
            func.Name = functionName
            func.Parent = remoteFolder
        else
            return
        end       
    end

    functionCache[functionName] = func
    return func
end

-- SERVER - CLIENT
function RemoteHandler.invokeClient(player, functionName, resultChecks, ...)
    local remoteFunc = RemoteHandler.getOrCreateFunction(functionName)
    if remoteFunc then
        -- Invoke the client and get the return value
        local results = {remoteFunc:InvokeClient(player, ...)}
        -- Perform checks on the return values
        if resultChecks then
            for i, check in ipairs(resultChecks) do
                if not SanityChecks.validate(check.type, results[i], table.unpack(check.params or {})) then
                    logError("Sanity check failed for client return value '" .. functionName .. "', value " .. i)
                    return nil
                end
            end
        end
        -- If all checks pass, return the results
        return table.unpack(results)
    else
        -- If function not found then return nil
        logError(functionName.."has not been found")
        return
    end  
end

function RemoteHandler.setClientCallback(functionName, callback)
    local remoteFunc = RemoteHandler.getOrCreateFunction(functionName)
    if remoteFunc then
        remoteFunc.OnClientInvoke = callback
    else
        logError(functionName.."has not been found")
    end 
end

--CLIENT - SERVER
function RemoteHandler.invokeServer(functionName, ...)
    local remoteFunc = RemoteHandler.getOrCreateFunction(functionName)
    if remoteFunc then
        return remoteFunc:InvokeServer(...)
    else
        -- If function not found then return nil
        logError(functionName.."has not been found")
        return
    end 
end

function RemoteHandler.setServerCallback(functionName, callback, checks)
    local remoteFunc = RemoteHandler.getOrCreateFunction(functionName)
    if remoteFunc then
        remoteFunc.OnServerInvoke = function(player, ...)
            if checks then
                local args = {...}
                for i, check in ipairs(checks) do
                    if not SanityChecks.validate(check.type, args[i], table.unpack(check.params or {})) then
                        logError("Sanity check failed for function '" .. functionName .. "', argument " .. i)
                        return nil
                    end
                end
            end
            return callback(player, ...)
        end
    else
        logError(functionName.."has not been found")
    end  
end

-- Batch processing for optimization
function RemoteHandler.batchFireAllClients(eventBatch)
    for eventName, eventData in pairs(eventBatch) do
        RemoteHandler.fireAllClients(eventName, table.unpack(eventData))
    end
end

return RemoteHandler
